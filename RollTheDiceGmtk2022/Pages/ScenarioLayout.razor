@using RollTheDiceGmtk2022.Game
@using RollTheDiceGmtk2022Logic
@using System.Threading

@if (Scenario != null)
{
    
<div class="container-fluid">
    <div class="board mt-5">
        <div class="row">
            <div class="col-3">
                <PlacedCard Card="@EnemyCard" IsEnemy="@true"></PlacedCard>

                
                <OutcomePrediction Outcome=@ExpectedOutcome></OutcomePrediction>

                @if (ExpectedOutcome != null && ExpectedOutcome.Won > 0.8m)
                {
                    <button @onclick="@(() => NavigateNext())">Next</button>        
                }
                
                
            </div>

            <div class="col-9">
                <div class="card-columns card-hand">
                    @for (var i = 0; i < Oracle.Count; i++)
                    {
                        var turnNumber = i + 1;
                        var oracle = Oracle[i];
                        var card = PlacedCards[i];
                        var cardLocation = new CardLocation(true, i);

                        if (card == null)
                        {
                            <div class="card missing-card" ondragover="event.preventDefault();" @ondrop="@(() => HandleCardDragStop(cardLocation))">
                                <div class="oracle-dice-match-container">
                                    <span class="turn-number">@turnNumber</span>
                                    <span class="dice-match-rule bob-on-hover">@oracle</span>
                                    @*<span class="turn-progression">&rarr;</span>*@
                                </div>

                                <div class="missing-card-instructions">
                                    <div>Choose a Card</div>
                                    <div>- OR -</div>
                                    <div>Avoid Enemy</div>
                                </div>

                                <select class="card-selection" @onchange="@(args => HandleCardSelection(cardLocation, args.Value))">
                                    <option>AVOID</option>

                                    @foreach (var cardDefinition in Scenario.AllowedCardDefinitions)
                                    {
                                        <option value="@cardDefinition.Name">@cardDefinition.Name</option>
                                    }
                                </select>
                            </div>
                        }
                        else
                        {
                            <PlacedCard Oracle="@oracle" Card="@card" Location="@cardLocation" OnRemove="@HandleRemove" OnDragStart="@HandleCardDragStart" OnDragStop="@HandleCardDragStop" OnDiceMatchRuleDragStart="@HandleDiceRuleDragStart" OnDiceMatchRuleDragStop="@HandleDiceRuleDragStop"></PlacedCard>
                        }
                    }
                </div>

                <div class="mt-2 text-left dice-table">
                    @foreach (var kvp in DiceMatchRuleDashboard)
                    {
                        var rule = kvp.Value;
                        var diceMatchRuleLocation = new DiceMatchRuleLocation(true, kvp.Key);

                        @if (rule != null)
                        {
                            <span class="dice-match-rule draggable-dice-match-rule" draggable="true" @ondragstart="@(() => HandleDiceRuleDragStart(diceMatchRuleLocation))" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))">@rule.Value</span>
                        }
                        else
                        {
                            <span class="dice-match-rule" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    @{
        var histogramDataPointsJson = System.Text.Json.JsonSerializer.Serialize(histogramDataPoints);
    }
    <div class="alert alert-info">The fates can complete this level in just @Scenario.RecommendedNumberOfTurns turns. Here's how your peers did:</div>
    <div id="histogram" data-points="@histogramDataPointsJson" data-your-fastest-this-session="@FastestNumberOfTurnsToWinThisSession"></div>
</div>

@*

<button id="run-button" @onclick="@(() => RunSimulation())">RUN</button>
@if (this.gs != null && isRunning)
{
    <button id="run-button" @onclick="@(() => StopSimulation())">STOP</button>    
}



<pre>
********************* DEBUG *********************
@if (this.gs != null)
{
    <text>
        IsGameEnded: @gs.IsGameEnded
        IsEnemyCardDefeated: @gs.IsEnemyCardDefeated
        IsPlayerHandDefeated: @gs.IsPlayerHandDefeated
        Enemy HP: @gs.EnemyCard.Hp
        DiceIndex: @gs.Timer.DiceIndex
        TurnNumber: @gs.Timer.TurnNumber
    </text>
    foreach (var line in gs.Log)
    {
        <text>@line</text>@Environment.NewLine
    }
}
********************* DEBUG *********************
</pre>

*@

}


@inject HttpClient HttpClient
@inject BlazorTimer BlazorTimer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@code
{
    ScenarioRegistrar ScenarioRegistrar = new ScenarioRegistrar();
    Dictionary<int,CardDefinition> ScenarioCards = new Dictionary<int,CardDefinition>();
    Dictionary<int,Card> PlacedCards = new Dictionary<int,Card>();
    Dictionary<int,DiceMatchRule?> DiceMatchRuleDashboard = new Dictionary<int,DiceMatchRule?>();
    List<DiceMatchRule> Oracle = new List<DiceMatchRule> { DiceMatchRule.Odd, DiceMatchRule.Even, DiceMatchRule.Odd, DiceMatchRule.Even, DiceMatchRule.Even };
    Card EnemyCard;

    public CardLocation? CardLocationDragStart { get; set; }
    public DiceMatchRuleLocation? DiceMatchRuleLocationPayload { get; set; }

    [Parameter]
    public int ScenarioIndex { get; set; }

    public Scenario Scenario { get; set; }

    [Parameter]
    public EventCallback CardMoved { get; set; }

    [Parameter]
    public EventCallback DiceMatchRuleMoved { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();



        BlazorTimer.SetTimer(500);
        BlazorTimer.OnElapsed += SimulationTick;

    }

    protected override void OnParametersSet()
    {
        var nextScenario = ScenarioRegistrar.Scenarios[ScenarioIndex];

        int pos= 0;
        foreach (var item in nextScenario.DiceMatchRulePool)
            DiceMatchRuleDashboard.Add(pos++, item);

        this.Oracle = nextScenario.Oracle;

        for (var i = 0; i < Oracle.Count; i++)
        {
            PlacedCards.Add(i, null);
        }

        EnemyCard = nextScenario.EnemyCard;

        this.Scenario = nextScenario;

        base.OnParametersSet();
    }

    List<int> histogramDataPoints;
    protected async override Task OnParametersSetAsync()
    {
        histogramDataPoints = await HttpClient.GetFromJsonAsync<List<int>>($"api/Histogram?scenario={ScenarioIndex}");

        await base.OnParametersSetAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("animateTurnPrediction", CurrentNumberOfTurnsToWin);
        await JSRuntime.InvokeAsync<string>("buildHistogram");

    }


    private class HistogramDataPoint
    {
        public int Turns{ get; set; }
    }

    private bool IsPlaced(int cardId)
    {
        return PlacedCards.Values.Any(x => x.Id == cardId);
    }


    public void OnCardDefinitionPlaced(CardDefinition cardDef, int cardId, int handPosition)
    {
        var card = new Card(cardDef, cardId);
        PlacedCards[handPosition] = card;

        this.StateHasChanged();
    }

    public void OnCardMoved(int originalPosition, int newPosition)
    {
        var originalOccupantOfNewPosition = PlacedCards[newPosition];
        var originalOccupantOfOriginalPosition = PlacedCards[originalPosition];
        PlacedCards[newPosition] = originalOccupantOfOriginalPosition;
        PlacedCards[originalPosition] = originalOccupantOfNewPosition;

        this.StateHasChanged();
    }



    GameState gs;
    bool isRunning;
    public void RunSimulation()
    {
        gs = BuildUpGameState();

        isRunning = true;
    }

    private GameState BuildUpGameState()
    {
        var gs2 = new GameState(Scenario,this.PlacedCards);
        return gs2;
    }

    public void StopSimulation()
    {
        isRunning = false;
    }

    GameOutcomeProbability ExpectedOutcome { get; set; }
    int? CurrentNumberOfTurnsToWin { get; set; }
    int? FastestNumberOfTurnsToWinThisSession { get; set; }

    object gsLock = new object();


    private void Recalculate()
    {
        List<GameOutcome> allOutcomes = new List<GameOutcome>();
        for (var i = 0; i < 5; i++)
        {
            var gs = BuildUpGameState();
            var thisOutcome = gs.AdvanceGameStateUntilCompletion(50);
            allOutcomes.Add(thisOutcome);
        }
        ExpectedOutcome = new GameOutcomeProbability(allOutcomes);
        CurrentNumberOfTurnsToWin = null;
        if (ExpectedOutcome.Won > .9m)
        {
            var fastest = allOutcomes.Where(x => x.Won).Min(x => x.EndingTurn);

            CurrentNumberOfTurnsToWin = fastest;

            if (bestRecord == null || bestRecord > fastest)
            {
                FastestNumberOfTurnsToWinThisSession = fastest + 1; // fastest is zero based index

                try
                {
                    var task = HttpClient.PostAsJsonAsync($"api/injest?scenario={ScenarioIndex}", this.PlacedCards);
                    task.ConfigureAwait(false);
                    task.Start();
                }
                catch (Exception ex)
                {

                }


                bestRecord = fastest;
            }
        }
    }

    int? bestRecord = null;
    private void SimulationTick()
    {
        if (Scenario == null)
            return;

        if (!isRunning)
        {
            Recalculate();


        }

        if (isRunning && !gs.IsGameEnded){
            try
            {
                lock (gsLock)
                {
                    gs.AdvanceGameStateOneTick();    
                }

            }
            catch (Exception ex)
            {
                gs.Log.Add(ex.Message);    
                gs.Log.Add(ex.StackTrace);
            }


            this.StateHasChanged();

        }
    }

    private void HandleCardSelection(CardLocation cardLocation, object obj)
    {
        var cardDefinitionName = (string)obj;
        var cardDefinition = Scenario.AllowedCardDefinitions.Single(x => x.Name == cardDefinitionName);

        var nonNullCards = PlacedCards.Values.Where(x => x != null);
        var newCardId = nonNullCards.Any() ? nonNullCards.Max(x => x.Id) + 1 : 1;

        PlacedCards[cardLocation.CollectionIndex] = new Card(cardDefinition, newCardId);

        Recalculate();
        this.StateHasChanged();
    }

    private void ReturnDiceMatchRuleToDashboard(DiceMatchRule rule)
    {
        for (var i = 0; i < DiceMatchRuleDashboard.Count; i++)
        {
            if (DiceMatchRuleDashboard[i] == null)
            {
                DiceMatchRuleDashboard[i] = rule;
                return;
            }
        }

        throw new Exception("No empty spots");
    }

    private void HandleRemove(CardLocation cardLocation)
    {
        var cardToRemove = PlacedCards[cardLocation.CollectionIndex];

        PlacedCards[cardLocation.CollectionIndex] = null;

        foreach (var slot in cardToRemove.Slots)
        {
            if (slot.Rule.HasValue)
                ReturnDiceMatchRuleToDashboard(slot.Rule.Value);
        }

        Recalculate();
        this.StateHasChanged();
    }

    public void OnDiceMatchRuleMoved(DiceMatchRuleLocation src, DiceMatchRuleLocation dest)
    {
        var srcRule = GetDiceMatchRuleByLocation(src);
        var destRule = GetDiceMatchRuleByLocation(dest);

        SetDiceMatchRuleByLocation(src, destRule);
        SetDiceMatchRuleByLocation(dest, srcRule);

        Recalculate();
        this.StateHasChanged();
    }

    private DiceMatchRule? GetDiceMatchRuleByLocation(DiceMatchRuleLocation location)
    {
        if (location.InDashboard)
        {
            return DiceMatchRuleDashboard[location.CollectionIndex];
        }
        else
        {
            return PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule;
        }
    }

    private void SetDiceMatchRuleByLocation(DiceMatchRuleLocation location, DiceMatchRule? rule)
    {
        if (location.InDashboard)
        {
            DiceMatchRuleDashboard[location.CollectionIndex] = rule;
        }
        else
        {
            PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule = rule;
        }
    }

    private void HandleCardDragStart(CardLocation location)
    {
        CardLocationDragStart = location;
    }

    private void HandleCardDragStop(CardLocation location)
    {
        if (CardLocationDragStart == null)
            return;

        OnCardMoved(CardLocationDragStart.Value.CollectionIndex, location.CollectionIndex);

        CardLocationDragStart = null;

        JSRuntime.InvokeAsync<string>("PlayBackpackSound");

        Recalculate();
        this.StateHasChanged();
    }

    private void HandleDiceRuleDragStart(DiceMatchRuleLocation location)
    {
        DiceMatchRuleLocationPayload = location;
    }

    private void HandleDiceRuleDragStop(DiceMatchRuleLocation location)
    {
        if (DiceMatchRuleLocationPayload == null)
            return;

        // Because our dice match rules might exist inside a card, dragging them elsewhere
        // will tragger the actual card drag, but this drop fires first so clear the card drag start
        // so the card drag stop does nothing.
        CardLocationDragStart = null;

        OnDiceMatchRuleMoved(DiceMatchRuleLocationPayload.Value, location);

        DiceMatchRuleLocationPayload = null;

        JSRuntime.InvokeAsync<string>("PlayBrickSound");

        Recalculate();
        this.StateHasChanged();
    }

    private void NavigateNext()
    {
        if (ScenarioIndex == 2)
            NavigationManager.NavigateTo("ThankYou");
        else
            NavigationManager.NavigateTo((ScenarioIndex+2).ToString());
    }
}

