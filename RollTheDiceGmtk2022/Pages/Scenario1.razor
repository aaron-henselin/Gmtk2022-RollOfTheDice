@page "/1"

@using RollTheDiceGmtk2022.Game

<style>
    .board {
        border: 1px solid gray;
    }

    .cardx{
        border: 1px solid lightgray;
        display: inline-block;
        padding: 5px;
        border-radius: 5px;
        height: 200px;
        width: 300px;
    }

    .card-top {
        
        height: 150px;
        text-align: center;
    }

    .card-bottom {
        height: 150px;
    }

    .draggable-dice-match-rule-receiver {
        border-radius: .25rem;
        border-style: solid;
        border-width: 1px;
        display: inline-block;
        height: 18px;
        width: 50px;
    }

    .card .draggable-dice-match-rule-receiver {
        margin-top: 15px;
    }

    .draggable-dice-match-rule-receiver + .draggable-dice-match-rule-receiver {
        margin-left: 10px;
    }

    .draggable-dice-match-rule-receiver:empty {
        position: relative;
        top: -1px;
    }

    .draggable-dice-match-rule {
        height: 18px;
        position: relative;
        top: -5px;
        width: 50px;
    }

    #app {
        width: 1280px;
    }
</style>

<h3>
    1. A bridge (not too far)
</h3>
<small>Reach the banner.</small>

<button id="run-button" @onclick="@(() => RunSimulation())"></button>


<div class="container-fluid">
    <div class="board">
        <div class="row">
            <div class="col-3">

            </div>

            <div class="col-9">
                <div class="card-deck">
                    @foreach (var kvp in PlacedCards)
                    {
                        var card = kvp.Value;

                        if (card == null)
                            continue;

                        <div class="card">
                            <div class="card-header text-right">
                                <span class="badge badge-success">@card.Hp</span>
                            </div>

                            <ul class="list-group list-group-flush">
                                @for (var i = 0; i < card.Slots.Count; i++)
                                {
                                    var slot = card.Slots[i];
                                    var rule = slot.Rule;
                                    var diceMatchRuleLocation = new DiceMatchRuleLocation(false, kvp.Key, i);

                                    <li class="list-group-item">
                                        <div class="row">
                                            <div class="col-4 border-right">
                                                <span class="bg-white border-primary draggable-dice-match-rule-receiver" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))">
                                                    @if (rule != null)
                                                    {
                                                        <span class="badge badge-primary draggable-dice-match-rule" draggable="true" @ondragstart="@(() => HandleDiceRuleDragStart(diceMatchRuleLocation))">@rule.Value</span>
                                                    }
                                                </span>
                                            </div>

                                            <div class="col-8">
                                                <div><strong>@slot.Effect.Name</strong></div>
                                                <div>@slot.Effect.Type.ToString() : @slot.Effect.Amount</div>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>

                <div class="mt-2 p-2">
                    @foreach (var kvp in DiceMatchRuleDashboard)
                    {
                        var rule = kvp.Value;
                        var diceMatchRuleLocation = new DiceMatchRuleLocation(true, kvp.Key);

                        <span class="bg-white border-primary draggable-dice-match-rule-receiver" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))">
                            @if (rule != null)
                            {
                                <span class="badge badge-primary draggable-dice-match-rule" draggable="true" @ondragstart="@(() => HandleDiceRuleDragStart(diceMatchRuleLocation))">@rule.Value</span>
                            }
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>
</div>



<button id="run-button" @onclick="@(() => RunSimulation())">RUN</button>
@if (this.gs != null && isRunning)
{
    <button id="run-button" @onclick="@(() => StopSimulation())">STOP</button>    
}

<OutcomePrediction Outcome=@ExpectedOutcome></OutcomePrediction>

<pre>
********************* DEBUG *********************
@if (this.gs != null)
{
    <text>
        IsGameEnded: @gs.IsGameEnded
        IsEnemyCardDefeated: @gs.IsEnemyCardDefeated
        IsPlayerHandDefeated: @gs.IsPlayerHandDefeated
        Enemy HP: @gs.EnemyCard.Hp
        DiceIndex: @gs.Timer.DiceIndex
        TurnNumber: @gs.Timer.TurnNumber
    </text>
    foreach (var line in gs.Log)
    {
        <text>@line</text>@Environment.NewLine
    }
}
********************* DEBUG *********************
</pre>

@inject BlazorTimer BlazorTimer
@inject NavigationManager NavigationManager
@code
{
    Dictionary<int,CardDefinition> ScenarioCards = new Dictionary<int,CardDefinition>();
    Dictionary<int,Card> PlacedCards = new Dictionary<int,Card>();
    Dictionary<int,DiceMatchRule?> DiceMatchRuleDashboard = new Dictionary<int,DiceMatchRule?>();

    public DiceMatchRuleLocation? DiceMatchRuleLocationPayload { get; set; }

    [Parameter]
    public EventCallback DiceMatchRuleMoved { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DiceMatchRuleDashboard.Add(0, DiceMatchRule.Even);
        DiceMatchRuleDashboard.Add(1, DiceMatchRule.High);
        DiceMatchRuleDashboard.Add(2, DiceMatchRule.Low);
        DiceMatchRuleDashboard.Add(3, null);
        DiceMatchRuleDashboard.Add(4, null);

        for (var i = 0; i < 3; i++)
        {
            var effect = new CardSlotEffect();
            effect.Type = CardSlotEffectType.Attack;
            effect.Amount = 10;
            effect.Name = "Backstab";

            var def = new CardDefinition();
            def.Name = "Rogue";
            def.Hp=25;
            def.Slots.Add(new SlotDefinition{ Name = "Backstab",Effect=effect});
            var card = new Card(def, i*50);
            PlacedCards.Add(i, card);

            //PlacedCards.Add(i, null); //todo
        }
        PlacedCards.Add(3, null);
        PlacedCards.Add(4, null);


        BlazorTimer.SetTimer(500);
        BlazorTimer.OnElapsed += SimulationTick;

    }

    private bool IsPlaced(int cardId)
    {
        return PlacedCards.Values.Any(x => x.Id == cardId);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void OnCardDefinitionPlaced(CardDefinition cardDef, int cardId, int handPosition)
    {
        var card = new Card(cardDef, cardId);
        PlacedCards[handPosition] = card;

        this.StateHasChanged();
    }

    public void OnCardMoved(int originalPosition, int newPosition)
    {
        var originalOccupantOfNewPosition = PlacedCards[newPosition];
        var originalOccupantOfOriginalPosition = PlacedCards[originalPosition];
        PlacedCards[newPosition] = originalOccupantOfOriginalPosition;
        PlacedCards[originalPosition] = originalOccupantOfNewPosition;

        this.StateHasChanged();
    }



    GameState gs;
    bool isRunning;
    public void RunSimulation()
    {
        gs = BuildUpGameState();

        isRunning = true;
    }

    private GameState BuildUpGameState()
    {
        var gs2 = new GameState();
        gs2.DiceOracle = new List<DiceMatchRule> { DiceMatchRule.Odd, DiceMatchRule.Even, DiceMatchRule.Odd, DiceMatchRule.Even, DiceMatchRule.Even };
        gs2.PlayerHand = new CardHand(this.PlacedCards);

        var effect = new CardSlotEffect();
        effect.Type = CardSlotEffectType.Attack;
        effect.Amount = 10;
        effect.Name = "Backstab";

        var def = new CardDefinition();
        def.Name = "Enemy Rogue";
        def.Hp=80;
        def.Slots.Add(new SlotDefinition{ Name = "Backstab",Effect=effect});
        gs2.EnemyCard =  new Card(def, 999);

        return gs2;
    }

    public void StopSimulation()
    {
        isRunning = false;
    }

    GameOutcomeProbability ExpectedOutcome { get; set; }
    object gsLock = new object();
    private void SimulationTick()
    {
        if (!isRunning)
        {
            List<GameOutcome> allOutcomes = new List<GameOutcome>();
            for (var i = 0; i < 5; i++)
            {
                var gs = BuildUpGameState();
                var thisOutcome = gs.AdvanceGameStateUntilCompletion(50);
                allOutcomes.Add(thisOutcome);
            }
            ExpectedOutcome = new GameOutcomeProbability(allOutcomes);

        }

        if (isRunning && !gs.IsGameEnded){
            try
            {
                lock (gsLock)
                {
                    gs.AdvanceGameStateOneTick();    
                }

            }
            catch (Exception ex)
            {
                gs.Log.Add(ex.Message);    
                gs.Log.Add(ex.StackTrace);
            }

            this.StateHasChanged();
        }
    }

    public void OnDiceMatchRuleMoved(DiceMatchRuleLocation src, DiceMatchRuleLocation dest)
    {
        var srcRule = GetDiceMatchRuleByLocation(src);
        var destRule = GetDiceMatchRuleByLocation(dest);

        SetDiceMatchRuleByLocation(src, destRule);
        SetDiceMatchRuleByLocation(dest, srcRule);
    }

    private DiceMatchRule? GetDiceMatchRuleByLocation(DiceMatchRuleLocation location)
    {
        if (location.InDashboard)
        {
            return DiceMatchRuleDashboard[location.CollectionIndex];
        }
        else
        {
            return PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule;
        }
    }

    private void SetDiceMatchRuleByLocation(DiceMatchRuleLocation location, DiceMatchRule? rule)
    {
        if (location.InDashboard)
        {
            DiceMatchRuleDashboard[location.CollectionIndex] = rule;
        }
        else
        {
            PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule = rule;
        }
    }

    private void HandleDiceRuleDragStart(DiceMatchRuleLocation location)
    {
        //Console.WriteLine($"HandleDragStart {i}");
        DiceMatchRuleLocationPayload = location;
    }

    private async Task HandleDiceRuleDragStop(DiceMatchRuleLocation location)
    {
        if (DiceMatchRuleLocationPayload == null)
            return;

        OnDiceMatchRuleMoved(DiceMatchRuleLocationPayload.Value, location);

        await DiceMatchRuleMoved.InvokeAsync(this);

        this.StateHasChanged();
    }
}

