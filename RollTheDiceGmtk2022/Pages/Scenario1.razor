@page "/1"

@using RollTheDiceGmtk2022.Game

<style>
    .board {
        border: 1px solid gray;
    }

    .cardx{
        border: 1px solid lightgray;
        display: inline-block;
        padding: 5px;
        border-radius: 5px;
        height: 200px;
        width: 300px;
    }

    .card-top {
        
        height: 150px;
        text-align: center;
    }

    .card-bottom {
        height: 150px;
    }

    .card-slot {
        border-top: 1px solid lightgray;
        height: 50px
    }

    .card-slot-rule-container {
        height: 50px;
        background-color: lightgray;
    }

    .draggable-dice-match-rule {
        border: 1px solid red;
        width: 35px;
        display: inline;
    }

    #app {
        width: 1280px;
    }
</style>

<h3>
    1. A bridge (not too far)
</h3>
<small>Reach the banner.</small>

<button id="run-button" @onclick="@(() => RunSimulation())"></button>


<div class="container-fluid">
    <div class="board">
        <div class="row">
            <div class="col-3">

            </div>

            <div class="col-9">
                <div class="mb-3">
                    @foreach (var kvp in PlacedCards)
                    {
                        var card = kvp.Value;
                        if (card == null)
                            continue;

                        <div class="cardx">
                            <div class="card-top">
                                <div>Id: @card.Id</div>
                                <div>Hp: @card.Hp</div>
                            </div>

                            <div class="card-bottom">
                                @for (var i = 0; i < card.Slots.Count; i++)
                                {
                                    var slot = card.Slots[i];
                                    var rule = slot.Rule;
                                    var diceMatchRuleLocation = new DiceMatchRuleLocation(false, kvp.Key, i);

                                    <div class="card-slot">
                                        <div class="row">
                                            <div class="col-3">
                                                <div class="card-slot-rule-container" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))">
                                                    @if (rule != null)
                                                    {
                                                        <div class="draggable-dice-match-rule" draggable="true" @ondragstart="@(() => HandleDiceRuleDragStart(diceMatchRuleLocation))">@rule.Value</div>
                                                    }
                                                </div>
                                            </div>

                                            <div class="col-9">
                                                @slot.Effect.Name (@slot.Effect.Type.ToString() : @slot.Effect.Amount)
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div>
                    <div class="draggable-rules-dashboard">
                        @foreach (var kvp in DiceMatchRuleDashboard)
                        {
                            var rule = kvp.Value;
                            var diceMatchRuleLocation = new DiceMatchRuleLocation(true, kvp.Key);

                            <div class="card-slot-rule-container" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))">
                                @if (rule != null)
                                {
                                    <div class="draggable-dice-match-rule" draggable="true" @ondragstart="@(() => HandleDiceRuleDragStart(diceMatchRuleLocation))">@rule.Value</div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<button id="run-button" @onclick="@(() => RunSimulation())">RUN</button>
@if (this.gs != null && isRunning)
{
    <button id="run-button" @onclick="@(() => StopSimulation())">STOP</button>    
}

<pre>
********************* DEBUG *********************
@if (this.gs != null)
{
    <text>
        IsGameEnded: @gs.IsGameEnded
        IsEnemyCardDefeated: @gs.IsEnemyCardDefeated
        IsPlayerHandDefeated: @gs.IsPlayerHandDefeated
        DiceIndex: @gs.Timer.DiceIndex
        TurnNumber: @gs.Timer.TurnNumber
    </text>
    foreach (var line in gs.Log)
    {
        <text>@line</text>@Environment.NewLine
    }
}
********************* DEBUG *********************
</pre>

@inject BlazorTimer BlazorTimer
@inject NavigationManager NavigationManager
@code
{
    Dictionary<int,CardDefinition> ScenarioCards = new Dictionary<int,CardDefinition>();
    Dictionary<int,Card> PlacedCards = new Dictionary<int,Card>();
    Dictionary<int,DiceMatchRule?> DiceMatchRuleDashboard = new Dictionary<int,DiceMatchRule?>();

    public DiceMatchRuleLocation? DiceMatchRuleLocationPayload { get; set; }

    [Parameter]
    public EventCallback DiceMatchRuleMoved { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DiceMatchRuleDashboard.Add(0, DiceMatchRule.Even);
        DiceMatchRuleDashboard.Add(1, DiceMatchRule.High);
        DiceMatchRuleDashboard.Add(2, DiceMatchRule.Low);
        DiceMatchRuleDashboard.Add(3, null);
        DiceMatchRuleDashboard.Add(4, null);

        for (var i = 0; i < 3; i++)
        {
            var effect = new CardSlotEffect();
            effect.Type = CardSlotEffectType.Attack;
            effect.Amount = 10;
            effect.Name = "Backstab";

            var def = new CardDefinition();
            def.Name = "Rogue";
            def.Hp=25;
            def.Slots.Add(new SlotDefinition{ Name = "Backstab",Effect=effect});
            var card = new Card(def, i*50);
            PlacedCards.Add(i, card);

            //PlacedCards.Add(i, null); //todo
        }
        PlacedCards.Add(3, null);
        PlacedCards.Add(4, null);


        BlazorTimer.SetTimer(1000);
        BlazorTimer.OnElapsed += SimulationTick;

    }

    private bool IsPlaced(int cardId)
    {
        return PlacedCards.Values.Any(x => x.Id == cardId);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void OnCardDefinitionPlaced(CardDefinition cardDef, int cardId, int handPosition)
    {
        var card = new Card(cardDef, cardId);
        PlacedCards[handPosition] = card;

        this.StateHasChanged();
    }

    public void OnCardMoved(int originalPosition, int newPosition)
    {
        var originalOccupantOfNewPosition = PlacedCards[newPosition];
        var originalOccupantOfOriginalPosition = PlacedCards[originalPosition];
        PlacedCards[newPosition] = originalOccupantOfOriginalPosition;
        PlacedCards[originalPosition] = originalOccupantOfNewPosition;

        this.StateHasChanged();
    }

    GameState gs;
    bool isRunning;
    public void RunSimulation()
    {
        gs = new GameState();
        gs.DiceOracle = new List<DiceMatchRule> { DiceMatchRule.Even, DiceMatchRule.Even, DiceMatchRule.Even, DiceMatchRule.Even, DiceMatchRule.Even };
        gs.PlayerHand = new CardHand(this.PlacedCards);

        var effect = new CardSlotEffect();
        effect.Type = CardSlotEffectType.Attack;
        effect.Amount = 10;
        effect.Name = "Backstab";

        var def = new CardDefinition();
        def.Name = "Enemy Rogue";
        def.Hp=250;
        def.Slots.Add(new SlotDefinition{ Name = "Backstab",Effect=effect});
        gs.EnemyCard =  new Card(def, 999);

        isRunning = true;
    }

    public void StopSimulation()
    {
        isRunning = false;
    }

    object gsLock = new object();
    private void SimulationTick()
    {
        if (isRunning && !gs.IsGameEnded){
            try
            {
                lock (gsLock)
                {
                    gs.AdvanceGameState();    
                }

            }
            catch (Exception ex)
            {
                gs.Log.Add(ex.Message);    
                gs.Log.Add(ex.StackTrace);
            }

            this.StateHasChanged();
        }
    }

    public void OnDiceMatchRuleMoved(DiceMatchRuleLocation src, DiceMatchRuleLocation dest)
    {
        var srcRule = GetDiceMatchRuleByLocation(src);
        var destRule = GetDiceMatchRuleByLocation(dest);

        SetDiceMatchRuleByLocation(src, destRule);
        SetDiceMatchRuleByLocation(dest, srcRule);
    }

    private DiceMatchRule? GetDiceMatchRuleByLocation(DiceMatchRuleLocation location)
    {
        if (location.InDashboard)
        {
            return DiceMatchRuleDashboard[location.CollectionIndex];
        }
        else
        {
            return PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule;
        }
    }

    private void SetDiceMatchRuleByLocation(DiceMatchRuleLocation location, DiceMatchRule? rule)
    {
        if (location.InDashboard)
        {
            DiceMatchRuleDashboard[location.CollectionIndex] = rule;
        }
        else
        {
            PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule = rule;
        }
    }

    private void HandleDiceRuleDragStart(DiceMatchRuleLocation location)
    {
        //Console.WriteLine($"HandleDragStart {i}");
        DiceMatchRuleLocationPayload = location;
    }

    private async Task HandleDiceRuleDragStop(DiceMatchRuleLocation location)
    {
        if (DiceMatchRuleLocationPayload == null)
            return;

        OnDiceMatchRuleMoved(DiceMatchRuleLocationPayload.Value, location);

        await DiceMatchRuleMoved.InvokeAsync(this);

        this.StateHasChanged();
    }
}

