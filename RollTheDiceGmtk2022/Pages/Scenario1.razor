@page "/1"

@using RollTheDiceGmtk2022.Game

<h3>
    1. A bridge (not too far)
</h3>
<small>Reach the banner.</small>




<button id="run-button" @onclick="@(() => RunSimulation())">RUN</button>

<pre>
********************* DEBUG *********************
@if (this.gs != null)
{
    <text>
        IsGameEnded: @gs.IsGameEnded
        IsEnemyCardDefeated: @gs.IsEnemyCardDefeated
        IsPlayerHandDefeated: @gs.IsPlayerHandDefeated
        DiceIndex: @gs.Timer.DiceIndex
        TurnNumber: @gs.Timer.TurnNumber
    </text>
    foreach (var line in gs.Log)
    {
        <text>@line</text>@Environment.NewLine
    }
}
********************* DEBUG *********************
</pre>

@inject BlazorTimer BlazorTimer
@inject NavigationManager NavigationManager
@code
{
    Dictionary<int,CardDefinition> ScenarioCards = new Dictionary<int,CardDefinition>();
    Dictionary<int,Card> PlacedCards = new Dictionary<int,Card>();
    Dictionary<int,DiceMatchRule?> DiceMatchRuleDashboard = new Dictionary<int,DiceMatchRule?>();


    protected override void OnInitialized()
    {
        base.OnInitialized();

        DiceMatchRuleDashboard.Add(0, DiceMatchRule.Even);
        DiceMatchRuleDashboard.Add(1, DiceMatchRule.High);
        DiceMatchRuleDashboard.Add(2, DiceMatchRule.Low);
        DiceMatchRuleDashboard.Add(3, null);
        DiceMatchRuleDashboard.Add(4, null);

        for (var i = 0; i < 3; i++)
        {
            var effect = new CardSlotEffect();
            effect.Type = CardSlotEffectType.Attack;
            effect.Amount = 10;
            effect.Name = "Backstab";

            var def = new CardDefinition();
            def.Name = "Rogue";
            def.Hp=25;
            def.Slots.Add(new SlotDefinition{ Name = "Backstab",Effect=effect});
            var card = new Card(def, i*50);
            PlacedCards.Add(i, card);

            //PlacedCards.Add(i, null); //todo
        }

        BlazorTimer.SetTimer(500);
        BlazorTimer.OnElapsed += SimulationTick;

    }

    private bool IsPlaced(int cardId)
    {
        return PlacedCards.Values.Any(x => x.Id == cardId);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void OnCardDefinitionPlaced(CardDefinition cardDef, int cardId, int handPosition)
    {
        var card = new Card(cardDef, cardId);
        PlacedCards[handPosition] = card;

        this.StateHasChanged();
    }

    public void OnCardMoved(int originalPosition, int newPosition)
    {
        var originalOccupantOfNewPosition = PlacedCards[newPosition];
        var originalOccupantOfOriginalPosition = PlacedCards[originalPosition];
        PlacedCards[newPosition] = originalOccupantOfOriginalPosition;
        PlacedCards[originalPosition] = originalOccupantOfNewPosition;

        this.StateHasChanged();
    }

    GameState gs;
    bool isRunning;
    public void RunSimulation()
    {
        gs = new GameState();
        gs.DiceOracle = new List<DiceMatchRule> { DiceMatchRule.Even, DiceMatchRule.Even, DiceMatchRule.Even, DiceMatchRule.Even, DiceMatchRule.Even };
        gs.PlayerHand = new CardHand(this.PlacedCards);

        var effect = new CardSlotEffect();
        effect.Type = CardSlotEffectType.Attack;
        effect.Amount = 10;
        effect.Name = "Backstab";

        var def = new CardDefinition();
        def.Name = "Enemy Rogue";
        def.Hp=250;
        def.Slots.Add(new SlotDefinition{ Name = "Backstab",Effect=effect});
        gs.EnemyCard =  new Card(def, 999);

        isRunning = true;
    }

    public void StopSimulation()
    {
        isRunning = false;
    }

    private void SimulationTick()
    {
        if (isRunning && !gs.IsGameEnded){
            gs.AdvanceGameState();
            this.StateHasChanged();
        }
    }

}

