@page "/1"

@using RollTheDiceGmtk2022.Game
@using RollTheDiceGmtk2022Logic

<style>
    .oracle-dice-match-rule {
        width: 50px;
    }

    .oracle-dice-match-rule + .oracle-dice-match-rule {
        margin-left: 10px;
    }

    .card-deck {
        flex-flow: row nowrap;
        overflow-x: auto;
        padding-bottom: 5px;
    }

    .card {
        min-width: 300px;
    }

    .card-deck .card:first-child {
        margin-left: 0;
    }

    .card-deck .card:last-child {
        margin-right: 0;
    }

    .card.missing-card:after {
        content: 'Place a card';
    }

    .hp {
        font-size: 1rem;
    }

    .draggable-dice-match-rule-receiver {
        border-radius: .25rem;
        border-style: solid;
        border-width: 1px;
        display: inline-block;
        height: 18px;
        width: 50px;
    }

    .card .draggable-dice-match-rule-receiver {
        margin-top: 15px;
    }

    .draggable-dice-match-rule-receiver + .draggable-dice-match-rule-receiver {
        margin-left: 10px;
    }

    .draggable-dice-match-rule-receiver:empty {
        position: relative;
        top: -1px;
    }

    .draggable-dice-match-rule {
        height: 18px;
        position: relative;
        top: -5px;
        width: 50px;
    }
</style>

<button id="run-button" @onclick="@(() => RunSimulation())">Run Simulation</button>


<div class="container-fluid">
    <div class="board mt-5">
        <h3>Oracle</h3>

        <div class="mb-2">
            @foreach (var oracleDiceMatchRule in Oracle)
            {
                <span class="badge badge-primary oracle-dice-match-rule">@oracleDiceMatchRule</span>
            }
        </div>

        <div class="row">
            <div class="col-3">
                <div class="card enemy-card">
                    <div class="card-header text-right">
                        <span class="badge badge-danger hp">@EnemyCard.Hp</span>
                    </div>
                    <ul class="list-group list-group-flush">
                        @for (var i = 0; i < EnemyCard.Slots.Count; i++)
                        {
                            var slot = EnemyCard.Slots[i];
                            var rule = slot.Rule;

                            <li class="list-group-item">
                                <div class="row">
                                    <div class="col-4 border-right">
                                        <span class="bg-white border-primary draggable-dice-match-rule-receiver">
                                            @if (rule != null)
                                            {
                                                <span class="badge badge-primary draggable-dice-match-rule">@rule.Value</span>
                                            }
                                        </span>
                                    </div>

                                    <div class="col-8">
                                        <div><strong>@slot.Effect.Name</strong></div>
                                        <div>@slot.Effect.Type.ToString() : @slot.Effect.Amount</div>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <div class="col-9">
                <div class="card-deck">
                    @foreach (var kvp in PlacedCards)
                    {
                        var card = kvp.Value;
                        var cardLocation = new CardLocation(true, kvp.Key);

                        if (card == null)
                        {
                            <div class="card missing-card" ondragover="event.preventDefault();" @ondrop="@(() => HandleCardDragStop(cardLocation))"></div>
                            continue;
                        }

                        <div class="card" draggable="true" @ondragstart="@(() => HandleCardDragStart(cardLocation))" ondragover="event.preventDefault();" @ondrop="@(() => HandleCardDragStop(cardLocation))">
                            <div class="card-header text-right">
                                <span class="badge badge-success hp">@card.Hp</span>
                            </div>

                            <ul class="list-group list-group-flush">
                                @for (var i = 0; i < card.Slots.Count; i++)
                                {
                                    var slot = card.Slots[i];
                                    var rule = slot.Rule;
                                    var diceMatchRuleLocation = new DiceMatchRuleLocation(false, kvp.Key, i);

                                    <li class="list-group-item">
                                        <div class="row">
                                            <div class="col-4 border-right">
                                                <span class="bg-white border-primary draggable-dice-match-rule-receiver" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))">
                                                    @if (rule != null)
                                                    {
                                                        <span class="badge badge-primary draggable-dice-match-rule" draggable="true" @ondragstart="@(() => HandleDiceRuleDragStart(diceMatchRuleLocation))">@rule.Value</span>
                                                    }
                                                </span>
                                            </div>

                                            <div class="col-8">
                                                <div><strong>@slot.Effect.Name</strong></div>
                                                <div>@slot.Effect.Type.ToString() : @slot.Effect.Amount</div>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>

                <div class="mt-2 p-2">
                    @foreach (var kvp in DiceMatchRuleDashboard)
                    {
                        var rule = kvp.Value;
                        var diceMatchRuleLocation = new DiceMatchRuleLocation(true, kvp.Key);

                        <span class="bg-white border-primary draggable-dice-match-rule-receiver" ondragover="event.preventDefault();" @ondrop="@(() => HandleDiceRuleDragStop(diceMatchRuleLocation))">
                            @if (rule != null)
                            {
                                <span class="badge badge-primary draggable-dice-match-rule" draggable="true" @ondragstart="@(() => HandleDiceRuleDragStart(diceMatchRuleLocation))">@rule.Value</span>
                            }
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>
</div>



<button id="run-button" @onclick="@(() => RunSimulation())">RUN</button>
@if (this.gs != null && isRunning)
{
    <button id="run-button" @onclick="@(() => StopSimulation())">STOP</button>    
}

<OutcomePrediction Outcome=@ExpectedOutcome></OutcomePrediction>

<pre>
********************* DEBUG *********************
@if (this.gs != null)
{
    <text>
        IsGameEnded: @gs.IsGameEnded
        IsEnemyCardDefeated: @gs.IsEnemyCardDefeated
        IsPlayerHandDefeated: @gs.IsPlayerHandDefeated
        Enemy HP: @gs.EnemyCard.Hp
        DiceIndex: @gs.Timer.DiceIndex
        TurnNumber: @gs.Timer.TurnNumber
    </text>
    foreach (var line in gs.Log)
    {
        <text>@line</text>@Environment.NewLine
    }
}
********************* DEBUG *********************
</pre>

@inject BlazorTimer BlazorTimer
@inject NavigationManager NavigationManager
@code
{
    ScenarioRegistrar scenarioRegistrar = new ScenarioRegistrar();

    public Scenario ThisScenario => scenarioRegistrar.Scenarios[0];

    Dictionary<int,CardDefinition> ScenarioCards = new Dictionary<int,CardDefinition>();
    Dictionary<int,Card> PlacedCards = new Dictionary<int,Card>();
    Dictionary<int,DiceMatchRule?> DiceMatchRuleDashboard = new Dictionary<int,DiceMatchRule?>();
    List<DiceMatchRule> Oracle = new List<DiceMatchRule> { DiceMatchRule.Odd, DiceMatchRule.Even, DiceMatchRule.Odd, DiceMatchRule.Even, DiceMatchRule.Even };
    Card EnemyCard;

    public CardLocation? CardLocationDragStart { get; set; }
    public DiceMatchRuleLocation? DiceMatchRuleLocationPayload { get; set; }

    [Parameter]
    public EventCallback CardMoved { get; set; }

    [Parameter]
    public EventCallback DiceMatchRuleMoved { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        int pos= 0;
        foreach (var item in ThisScenario.DiceMatchRulePool)
            DiceMatchRuleDashboard.Add(pos++, item);

        this.Oracle = ThisScenario.Oracle;

        for (var i = 0; i < 4; i++)
        {
            CardDefinition useDefinition = null;
            if (i == 0)
                useDefinition = KnownCardDefinitions.Rogue;
            if (i == 1)
                useDefinition = KnownCardDefinitions.Archer;
            if (i == 2)
                useDefinition = KnownCardDefinitions.Paladin;
            if (i == 3)
                useDefinition = KnownCardDefinitions.Cleric;

            var card = new Card(useDefinition, i);
            PlacedCards.Add(i, card);
        }
        //PlacedCards.Add(3, null);
        PlacedCards.Add(4, null);

        EnemyCard = ThisScenario.EnemyCard;

        BlazorTimer.SetTimer(500);
        BlazorTimer.OnElapsed += SimulationTick;

    }

    private bool IsPlaced(int cardId)
    {
        return PlacedCards.Values.Any(x => x.Id == cardId);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void OnCardDefinitionPlaced(CardDefinition cardDef, int cardId, int handPosition)
    {
        var card = new Card(cardDef, cardId);
        PlacedCards[handPosition] = card;

        this.StateHasChanged();
    }

    public void OnCardMoved(int originalPosition, int newPosition)
    {
        var originalOccupantOfNewPosition = PlacedCards[newPosition];
        var originalOccupantOfOriginalPosition = PlacedCards[originalPosition];
        PlacedCards[newPosition] = originalOccupantOfOriginalPosition;
        PlacedCards[originalPosition] = originalOccupantOfNewPosition;

        this.StateHasChanged();
    }



    GameState gs;
    bool isRunning;
    public void RunSimulation()
    {
        gs = BuildUpGameState();

        isRunning = true;
    }

    private GameState BuildUpGameState()
    {
        var gs2 = new GameState(ThisScenario,this.PlacedCards);
        return gs2;
    }

    public void StopSimulation()
    {
        isRunning = false;
    }

    GameOutcomeProbability ExpectedOutcome { get; set; }
    object gsLock = new object();
    private void SimulationTick()
    {
        if (!isRunning)
        {
            List<GameOutcome> allOutcomes = new List<GameOutcome>();
            for (var i = 0; i < 5; i++)
            {
                var gs = BuildUpGameState();
                var thisOutcome = gs.AdvanceGameStateUntilCompletion(50);
                allOutcomes.Add(thisOutcome);
            }
            ExpectedOutcome = new GameOutcomeProbability(allOutcomes);

        }

        if (isRunning && !gs.IsGameEnded){
            try
            {
                lock (gsLock)
                {
                    gs.AdvanceGameStateOneTick();    
                }

            }
            catch (Exception ex)
            {
                gs.Log.Add(ex.Message);    
                gs.Log.Add(ex.StackTrace);
            }

            this.StateHasChanged();
        }
    }

    public void OnDiceMatchRuleMoved(DiceMatchRuleLocation src, DiceMatchRuleLocation dest)
    {
        var srcRule = GetDiceMatchRuleByLocation(src);
        var destRule = GetDiceMatchRuleByLocation(dest);

        SetDiceMatchRuleByLocation(src, destRule);
        SetDiceMatchRuleByLocation(dest, srcRule);
    }

    private DiceMatchRule? GetDiceMatchRuleByLocation(DiceMatchRuleLocation location)
    {
        if (location.InDashboard)
        {
            return DiceMatchRuleDashboard[location.CollectionIndex];
        }
        else
        {
            return PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule;
        }
    }

    private void SetDiceMatchRuleByLocation(DiceMatchRuleLocation location, DiceMatchRule? rule)
    {
        if (location.InDashboard)
        {
            DiceMatchRuleDashboard[location.CollectionIndex] = rule;
        }
        else
        {
            PlacedCards[location.CollectionIndex].Slots[location.SlotIndex].Rule = rule;
        }
    }

    private void HandleCardDragStart(CardLocation location)
    {
        CardLocationDragStart = location;
    }

    private async Task HandleCardDragStop(CardLocation location)
    {
        if (CardLocationDragStart == null)
            return;

        OnCardMoved(CardLocationDragStart.Value.CollectionIndex, location.CollectionIndex);

        await CardMoved.InvokeAsync(this);

        CardLocationDragStart = null;

        this.StateHasChanged();
    }

    private void HandleDiceRuleDragStart(DiceMatchRuleLocation location)
    {
        DiceMatchRuleLocationPayload = location;
    }

    private async Task HandleDiceRuleDragStop(DiceMatchRuleLocation location)
    {
        if (DiceMatchRuleLocationPayload == null)
            return;

        // Because our dice match rules might exist inside a card, dragging them elsewhere
        // will tragger the actual card drag, but this drop fires first so clear the card drag start
        // so the card drag stop does nothing.
        CardLocationDragStart = null;

        OnDiceMatchRuleMoved(DiceMatchRuleLocationPayload.Value, location);

        await DiceMatchRuleMoved.InvokeAsync(this);

        DiceMatchRuleLocationPayload = null;

        this.StateHasChanged();
    }
}

